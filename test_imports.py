#!/usr/bin/env python3
"""
Script de test simple pour v√©rifier les imports de la nouvelle structure modulaire.
Ex√©cutez depuis la racine du projet : python test_imports.py
"""

import sys
import os
from pathlib import Path

def test_imports():
    """Teste tous les imports de la nouvelle structure."""
    
    print("üîç TEST DES IMPORTS - STA211 PROJECT")
    print("=" * 50)
    
    # V√©rifier qu'on est dans le bon r√©pertoire
    current_dir = Path.cwd()
    print(f"üìÅ R√©pertoire actuel: {current_dir}")
    
    # V√©rifier la pr√©sence du dossier modules
    modules_dir = current_dir / 'modules'
    if not modules_dir.exists():
        print(f"‚ùå Dossier 'modules' non trouv√© dans {current_dir}")
        print("üí° Assurez-vous d'ex√©cuter ce script depuis la racine du projet")
        return False
    
    print(f"‚úÖ Dossier modules trouv√©: {modules_dir}")
    
    # Test des imports principaux
    print(f"\nüì¶ Test des imports:")
    
    modules_to_test = [
        ('modules.config', 'Configuration centralis√©e'),
        ('modules.utils.storage', 'Utilitaires de stockage'),  
        ('modules.evaluation.metrics', 'Module d\'√©valuation'),
        ('modules.modeling.ensembles', 'Module d\'ensembles'),
        ('modules.notebook1_preprocessing', 'Pr√©traitement (Notebook 1)'),
        ('modules.notebook2_modeling', 'Mod√©lisation (Notebook 2)')
    ]
    
    success_count = 0
    
    for module_name, description in modules_to_test:
        try:
            __import__(module_name)
            print(f"  ‚úÖ {module_name} - {description}")
            success_count += 1
        except ImportError as e:
            print(f"  ‚ùå {module_name} - {description}: {e}")
        except Exception as e:
            print(f"  ‚ö†Ô∏è {module_name} - {description}: {e}")
    
    # Test des imports sp√©cifiques
    print(f"\nüß™ Test des fonctions sp√©cifiques:")
    
    try:
        from modules.config import cfg
        print(f"  ‚úÖ cfg import√© - Racine: {cfg.root}")
    except Exception as e:
        print(f"  ‚ùå cfg: {e}")
        return False
    
    try:
        from modules.utils import save_artifact, load_artifact
        print(f"  ‚úÖ Fonctions de stockage import√©es")
    except Exception as e:
        print(f"  ‚ùå Fonctions de stockage: {e}")
    
    try:
        from modules.evaluation import calculate_basic_metrics
        print(f"  ‚úÖ Fonctions d'√©valuation import√©es")
    except Exception as e:
        print(f"  ‚ùå Fonctions d'√©valuation: {e}")
    
    try:
        from modules.modeling import create_voting_ensemble
        print(f"  ‚úÖ Fonctions d'ensemble import√©es")
    except Exception as e:
        print(f"  ‚ùå Fonctions d'ensemble: {e}")
    
    # Test rapide avec des donn√©es
    print(f"\nüßÆ Test fonctionnel:")
    
    try:
        import numpy as np
        import pandas as pd
        
        # Test de sauvegarde/rechargement
        test_data = {"test": "data", "value": 42}
        from modules.utils import save_artifact, load_artifact
        
        # Sauvegarder
        saved_path = save_artifact(test_data, "test.pkl", cfg.paths.models)
        print(f"  ‚úÖ Sauvegarde: {saved_path}")
        
        # Recharger
        loaded_data = load_artifact("test.pkl", cfg.paths.models)
        if loaded_data == test_data:
            print(f"  ‚úÖ Rechargement: donn√©es identiques")
        else:
            print(f"  ‚ùå Rechargement: donn√©es diff√©rentes")
            
    except Exception as e:
        print(f"  ‚ö†Ô∏è Test fonctionnel √©chou√©: {e}")
    
    # R√©sum√©
    print(f"\nüìä R√âSUM√â:")
    print(f"  Modules test√©s: {len(modules_to_test)}")
    print(f"  Succ√®s: {success_count}")
    print(f"  √âchecs: {len(modules_to_test) - success_count}")
    
    if success_count == len(modules_to_test):
        print(f"\nüéâ TOUS LES TESTS R√âUSSIS !")
        print(f"üöÄ La nouvelle structure modulaire fonctionne parfaitement.")
        return True
    else:
        print(f"\n‚ö†Ô∏è CERTAINS TESTS ONT √âCHOU√â")
        print_troubleshooting()
        return False

def print_troubleshooting():
    """Affiche les instructions de d√©pannage."""
    print(f"\nüîß D√âPANNAGE:")
    print(f"1. V√©rifiez que vous √™tes dans le bon r√©pertoire:")
    print(f"   pwd  # doit afficher le chemin vers sta211-project")
    print(f"")
    print(f"2. Installez les d√©pendances manquantes:")
    print(f"   pip install -r requirements.txt")
    print(f"")
    print(f"3. Si vous utilisez un environnement virtuel, activez-le:")
    print(f"   source venv/bin/activate  # Linux/Mac")
    print(f"   venv\\Scripts\\activate     # Windows")
    print(f"")
    print(f"4. V√©rifiez la structure des dossiers:")
    print(f"   ls -la modules/  # doit montrer config.py, utils/, etc.")

def check_dependencies():
    """V√©rifie les d√©pendances Python."""
    print(f"\nüì¶ V√âRIFICATION DES D√âPENDANCES:")
    
    required_packages = [
        'pandas', 'numpy', 'scikit-learn', 'matplotlib', 
        'seaborn', 'xgboost', 'joblib', 'scipy'
    ]
    
    optional_packages = ['chardet', 'missingno']
    
    missing_required = []
    missing_optional = []
    
    for package in required_packages:
        try:
            __import__(package.replace('-', '_'))
            print(f"  ‚úÖ {package}")
        except ImportError:
            print(f"  ‚ùå {package}")
            missing_required.append(package)
    
    for package in optional_packages:
        try:
            __import__(package.replace('-', '_'))
            print(f"  ‚úÖ {package} (optionnel)")
        except ImportError:
            print(f"  ‚ö†Ô∏è {package} (optionnel)")
            missing_optional.append(package)
    
    if missing_required:
        print(f"\n‚ö†Ô∏è Packages requis manquants: {', '.join(missing_required)}")
        print(f"üí° Installez avec: pip install {' '.join(missing_required)}")
        return False
    
    if missing_optional:
        print(f"\nüí° Packages optionnels manquants: {', '.join(missing_optional)}")
    
    return True

if __name__ == "__main__":
    print(f"Python {sys.version}")
    print(f"OS: {os.name}")
    
    # V√©rifier les d√©pendances d'abord
    deps_ok = check_dependencies()
    
    # Puis tester les imports
    if deps_ok:
        success = test_imports()
        sys.exit(0 if success else 1)
    else:
        print(f"\n‚ùå Installez d'abord les d√©pendances manquantes")
        sys.exit(1)